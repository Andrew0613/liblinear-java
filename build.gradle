buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java-library'
    id 'jacoco'
    id 'com.bmuschko.nexus' version '2.3.1'
    id 'com.github.kt3k.coveralls' version '2.8.2'
    id 'de.undercouch.download' version '3.4.3'
    id 'me.champeau.gradle.jmh' version '0.4.8'
}

group = "de.bwaldvogel"
version = '2.21'

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava.options.encoding = 'UTF-8'

ext {
    title = 'liblinear'
    description = 'Java port of Liblinear'
    url = 'https://github.com/bwaldvogel/liblinear'
}

jar {
    manifest {
        attributes 'Implementation-Title': title, 'Implementation-Version': version
    }
}

modifyPom {
    project {
        groupId        'de.bwaldvogel'
        artifactId     'liblinear'
        name           title
        description    'Java port of Liblinear'
        url            url
        inceptionYear '2008'

        scm {
            url 'git@github.com:bwaldvogel/liblinear.git'
            connection 'scm:git:git@github.com:bwaldvogel/liblinear.git'
            developerConnection 'scm:git:git@github.com:bwaldvogel/liblinear.git'
        }

        licenses {
            license {
                name 'The BSD License'
                url 'http://www.opensource.org/licenses/bsd-license.php'
                distribution 'repo'
            }
        }

        developers {
            developer {
                id 'bwaldvogel'
                name 'Benedikt Waldvogel'
                email 'mail@bwaldvogel.de'
            }
        }
    }
}

nexus {
    sign = true
}

repositories {
    mavenCentral()
}

jacocoTestReport {
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    dependsOn test
}

apply from: 'datasets.gradle'

test.dependsOn downloadAndVerifyDatasets

wrapper {
    gradleVersion = "5.2.1"
    distributionType = Wrapper.DistributionType.ALL
}

jmh {
    include = ['de\\.bwaldvogel\\.liblinear\\.LinearBenchmark.*']
    jvmArgs = ["-Ddataset.directory=" + projectDir + "/src/test/datasets"]
}

tasks['jmh'].dependsOn downloadAndVerifyRcv1

dependencies {
    testImplementation group: 'junit', name: 'junit', version: 'latest.release'
    testImplementation group: 'org.slf4j', name: 'slf4j-api', version: 'latest.release'
    testImplementation group: 'org.assertj', name: 'assertj-core', version: 'latest.release'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: 'latest.release'
    testImplementation group: 'nl.jqno.equalsverifier', name: 'equalsverifier', version: 'latest.release'

    testRuntimeOnly group: 'ch.qos.logback', name: 'logback-classic', version: 'latest.release'

    jmh group: 'org.apache.commons', name: 'commons-compress', version: 'latest.release'
    jmh 'org.openjdk.jmh:jmh-generator-annprocess:latest.release' // for IntelliJ

    components.all { ComponentMetadataDetails details ->
        details.statusScheme = ['candidate', 'release']
        if (details.id.version =~ /(?i).+([-.])(CANDIDATE|RC|BETA|ALPHA).*/) {
            details.status = 'candidate'
        } else {
            details.status = 'release'
        }
    }
}

dependencyLocking {
    lockAllConfigurations()
}

// vim: set ts=4 sw=4 et:
